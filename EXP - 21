#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <openssl/des.h>  
#define BLOCK_SIZE 8  
size_t pad_plaintext(uint8_t *plaintext, size_t len, uint8_t *padded) {
    size_t padded_len = (len % BLOCK_SIZE == 0) ? len + BLOCK_SIZE : len + (BLOCK_SIZE - len % BLOCK_SIZE);
    memcpy(padded, plaintext, len);
    padded[len] = 0x80; 
    memset(padded + len + 1, 0, padded_len - len - 1);
    return padded_len;
}
void ECB_encrypt(uint8_t *plaintext, size_t len, uint8_t *key, uint8_t *ciphertext) {
    DES_key_schedule ks;
    DES_set_key_unchecked((DES_cblock *)key, &ks);
    for (size_t i = 0; i < len; i += BLOCK_SIZE) {
        DES_ecb_encrypt((DES_cblock *)(plaintext + i), (DES_cblock *)(ciphertext + i), &ks, DES_ENCRYPT);
    }
}
void CBC_encrypt(uint8_t *plaintext, size_t len, uint8_t *key, uint8_t *iv, uint8_t *ciphertext) {
    DES_key_schedule ks;
    DES_set_key_unchecked((DES_cblock *)key, &ks);
    uint8_t xor_block[BLOCK_SIZE];
    memcpy(xor_block, iv, BLOCK_SIZE);  
    for (size_t i = 0; i < len; i += BLOCK_SIZE) {
        for (size_t j = 0; j < BLOCK_SIZE; j++) {
            xor_block[j] ^= plaintext[i + j];
        }
        DES_ecb_encrypt((DES_cblock *)xor_block, (DES_cblock *)(ciphertext + i), &ks, DES_ENCRYPT);
        memcpy(xor_block, ciphertext + i, BLOCK_SIZE);
    }
}
void CFB_encrypt(uint8_t *plaintext, size_t len, uint8_t *key, uint8_t *iv, uint8_t *ciphertext) {
    DES_key_schedule ks;
    DES_set_key_unchecked((DES_cblock *)key, &ks);
    uint8_t feedback[BLOCK_SIZE];
    memcpy(feedback, iv, BLOCK_SIZE);  
    for (size_t i = 0; i < len; i += BLOCK_SIZE) {
        DES_ecb_encrypt((DES_cblock *)feedback, (DES_cblock *)feedback, &ks, DES_ENCRYPT);
        for (size_t j = 0; j < BLOCK_SIZE && i + j < len; j++) {
            ciphertext[i + j] = plaintext[i + j] ^ feedback[j];
            feedback[j] = ciphertext[i + j];
        }
    }
}
int main() {
    uint8_t key[8] = {0x13, 0x34, 0x57, 0x79, 0x9b, 0xbc, 0xdf, 0xf1};  
    uint8_t iv[BLOCK_SIZE] = {0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0};  
    uint8_t plaintext[] = "This is a test message that will be padded.";
    size_t plaintext_len = strlen((char *)plaintext);
    uint8_t padded_plaintext[plaintext_len + BLOCK_SIZE];
    size_t padded_len = pad_plaintext(plaintext, plaintext_len, padded_plaintext);
    uint8_t ecb_ciphertext[padded_len];
    uint8_t cbc_ciphertext[padded_len];
    uint8_t cfb_ciphertext[padded_len];
    ECB_encrypt(padded_plaintext, padded_len, key, ecb_ciphertext);
    CBC_encrypt(padded_plaintext, padded_len, key, iv, cbc_ciphertext);
    CFB_encrypt(padded_plaintext, padded_len, key, iv, cfb_ciphertext);
    printf("ECB Ciphertext: ");
    for (size_t i = 0; i < padded_len; i++) {
        printf("%02x", ecb_ciphertext[i]);
    }
    printf("\n");
    printf("CBC Ciphertext: ");
    for (size_t i = 0; i < padded_len; i++) {
        printf("%02x", cbc_ciphertext[i]);
    }
    printf("\n");
    printf("CFB Ciphertext: ");
    for (size_t i = 0; i < padded_len; i++) {
        printf("%02x", cfb_ciphertext[i]);
    }
    printf("\n");
    return 0;
}
