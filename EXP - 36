#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}
int mod_inverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1; 
}
void encrypt(char *plaintext, char *ciphertext, int a, int b) {
    int i;
    for (i = 0; plaintext[i] != '\0'; i++) {
        char ch = plaintext[i];
        if (ch >= 'A' && ch <= 'Z') {
            ciphertext[i] = ((a * (ch - 'A') + b) % 26) + 'A';
        } else if (ch >= 'a' && ch <= 'z') {
            ciphertext[i] = ((a * (ch - 'a') + b) % 26) + 'a';
        } else {
            ciphertext[i] = ch; 
        }
    }
    ciphertext[i] = '\0';  
}
void decrypt(char *ciphertext, char *decrypted_text, int a, int b) {
    int a_inv = mod_inverse(a, 26);
    if (a_inv == -1) {
        printf("Decryption is not possible because a and 26 are not coprime.\n");
        return;
    }
    int i;
    for (i = 0; ciphertext[i] != '\0'; i++) {
        char ch = ciphertext[i];
        if (ch >= 'A' && ch <= 'Z') {
            decrypted_text[i] = (a_inv * ((ch - 'A' - b + 26) % 26)) % 26 + 'A';
        } else if (ch >= 'a' && ch <= 'z') {
            decrypted_text[i] = (a_inv * ((ch - 'a' - b + 26) % 26)) % 26 + 'a';
        } else {
            decrypted_text[i] = ch; 
        }
    }
    decrypted_text[i] = '\0';  
}
int main() {
    char plaintext[100], ciphertext[100], decrypted_text[100];
    int a, b;
    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0';
    printf("Enter value of a (must be coprime with 26): ");
    scanf("%d", &a);
    printf("Enter value of b: ");
    scanf("%d", &b);
    if (gcd(a, 26) != 1) {
        printf("Invalid value of a. It must be coprime with 26.\n");
        return 1;
    }
    encrypt(plaintext, ciphertext, a, b);
    printf("Encrypted ciphertext: %s\n", ciphertext);
    decrypt(ciphertext, decrypted_text, a, b);
    printf("Decrypted text: %s\n", decrypted_text);
    return 0;
}
