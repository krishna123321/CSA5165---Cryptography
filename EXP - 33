#include <stdio.h>
#include <stdint.h>
int IP[] = {
    58, 50, 42, 34, 26, 18, 10, 2,
    60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6,
    64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17, 9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7
};
int FP[] = {
    40, 8, 48, 16, 56, 24, 64, 32,
    39, 7, 47, 15, 55, 23, 63, 31,
    38, 6, 46, 14, 54, 22, 62, 30,
    37, 5, 45, 13, 53, 21, 61, 29,
    36, 4, 44, 12, 52, 20, 60, 28,
    35, 3, 43, 11, 51, 19, 59, 27,
    34, 2, 42, 10, 50, 18, 58, 26,
    33, 1, 41, 9, 49, 17, 57, 25
};
int PC1[] = {
    57, 49, 41, 33, 25, 17, 9,
    1, 58, 50, 42, 34, 26, 18,
    10, 2, 59, 51, 43, 35, 27,
    19, 11, 3, 60, 52, 44, 36,
    63, 55, 47, 39, 31, 23, 15,
    7, 62, 54, 46, 38, 30, 22,
    14, 6, 61, 53, 45, 37, 29,
    21, 13, 5, 28, 20, 12, 4
};
int PC2[] = {
    14, 17, 11, 24, 1, 5,
    3, 28, 15, 6, 21, 10,
    23, 19, 12, 4, 26, 8,
    16, 7, 27, 20, 13, 2,
    41, 52, 31, 37, 47, 55,
    30, 40, 51, 45, 33, 48,
    44, 49, 39, 56, 34, 53,
    46, 42, 50, 36, 29, 32
};
int shifts[] = {
    1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1
};
uint64_t permute(uint64_t input, int *table, int n) {
    uint64_t output = 0;
    for (int i = 0; i < n; i++) {
        output <<= 1;
        output |= (input >> (64 - table[i])) & 1;
    }
    return output;
}
void generate_subkeys(uint64_t key, uint64_t subkeys[16]) {
    uint64_t permuted_key = permute(key, PC1, 56);
    uint32_t C = (permuted_key >> 28) & 0xFFFFFFF;
    uint32_t D = permuted_key & 0xFFFFFFF;
    for (int i = 0; i < 16; i++) {
        C = ((C << shifts[i]) | (C >> (28 - shifts[i]))) & 0xFFFFFFF;
        D = ((D << shifts[i]) | (D >> (28 - shifts[i]))) & 0xFFFFFFF;
        uint64_t CD = ((uint64_t)C << 28) | D;
        subkeys[i] = permute(CD, PC2, 48);
    }
)
uint64_t des_encrypt(uint64_t plaintext, uint64_t key) {
    uint64_t subkeys[16];
    generate_subkeys(key, subkeys);
    uint64_t permuted_plaintext = permute(plaintext, IP, 64);
    uint32_t L = (permuted_plaintext >> 32) & 0xFFFFFFFF;
    uint32_t R = permuted_plaintext & 0xFFFFFFFF;
    for (int i = 0; i < 16; i++) {
        uint32_t temp = R;
        R = L ^ (subkeys[i] & 0xFFFFFFFF); 
        L = temp;
    }
    uint64_t combined = ((uint64_t)R << 32) | L;
    uint64_t ciphertext = permute(combined, FP, 64);
    return ciphertext;
}
int main() {
    uint64_t plaintext = 0x0123456789ABCDEF;
    uint64_t key = 0x133457799BBCDFF1;
    uint64_t ciphertext = des_encrypt(plaintext, key);
    printf("Plaintext:  0x%016llX\n", plaintext);
    printf("Ciphertext: 0x%016llX\n", ciphertext);
    return 0;
}
