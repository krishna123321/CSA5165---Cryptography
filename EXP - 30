#include <stdio.h>
#include <openssl/aes.h>
#include <openssl/rand.h>
#include <string.h>
void aes_cbc_encrypt(const unsigned char *key, const unsigned char *iv,
                     const unsigned char *input, unsigned char *output, size_t length) {
    AES_KEY aes_key;
    AES_set_encrypt_key(key, 128, &aes_key);
    AES_cbc_encrypt(input, output, length, &aes_key, (unsigned char *)iv, AES_ENCRYPT);
}
void compute_cbc_mac(const unsigned char *key, const unsigned char *message,
                     unsigned char *mac, size_t length) {
    unsigned char iv[AES_BLOCK_SIZE] = {0};
    unsigned char ciphertext[AES_BLOCK_SIZE];
    aes_cbc_encrypt(key, iv, message, ciphertext, length);
    memcpy(mac, ciphertext, AES_BLOCK_SIZE);
}
int main() {
    unsigned char key[AES_BLOCK_SIZE] = "0123456789abcdef"; 
    unsigned char message[AES_BLOCK_SIZE] = "messageblockX"; 
    unsigned char mac[AES_BLOCK_SIZE];
    compute_cbc_mac(key, message, mac, AES_BLOCK_SIZE);
    printf("CBC-MAC for message X: ");
    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
        printf("%02x", mac[i]);
    }
    printf("\n");
    unsigned char x_xor_t[AES_BLOCK_SIZE];
    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
        x_xor_t[i] = message[i] ^ mac[i];
    }
    unsigned char two_block_message[2 * AES_BLOCK_SIZE];
    memcpy(two_block_message, message, AES_BLOCK_SIZE);
    memcpy(two_block_message + AES_BLOCK_SIZE, x_xor_t, AES_BLOCK_SIZE);
    unsigned char mac_two_block[AES_BLOCK_SIZE];
    compute_cbc_mac(key, two_block_message, mac_two_block, 2 * AES_BLOCK_SIZE);
    printf("CBC-MAC for message X || (X ? T): ");
    for (int i = 0; i < AES_BLOCK_SIZE; i++) {
        printf("%02x", mac_two_block[i]);
    }
    printf("\n");
    return 0;
}
